---
id: 13
name: "Create-Reactor"
description: null
visible: true
onSuccessWorkflow: null
onFailureWorkflow: null
schedules: []
workflowSteps:
- id: 46
  step: 100
  jumpToStep: 0
  failureStep: 0
  timeout: 0
  async: false
  workflowAction:
    id: 98
    name: "Generate License"
    description: ""
    provider:
      id: 8
      name: "Integra Cloud"
      description: ""
      hostname: "integra-kube-m1.cloudapp.net"
      port: 9798
      timeout: 3600000
      username: null
      password: null
      reachable: true
      secured: true
      enabled: null
      providerVersion: "1.1.0"
      tags: []
    providerAction:
      id: 98
      name: "logicAction"
      displayName: "Apply Logic"
      description: "Gives you the ability to insert code dynamically."
      pipes: []
      transaction: null
      outputs: []
      inputs:
      - id: 126
        index: 0
        name: "logicInputs"
        displayName: "Logic"
        description: ""
        visible: true
        inputs: []
        inputFields:
        - id: 378
          index: 0
          name: "logicLanguague"
          displayName: "Language"
          description: "Programming language the expression is written in."
          required: true
          visible: true
          editable: true
          dataType: "List"
          value: "Groovy"
        - id: 379
          index: 2
          name: "logicExpression"
          displayName: "Expression"
          description: "This field holds programmatic expressions that will be evaluated\
            \ at runtime."
          required: true
          visible: true
          editable: true
          dataType: "TextArea"
          value: "import groovy.time.TimeCategory\rimport java.text.SimpleDateFormat\r\
            import com.emitrom.integra.license.Vault\r\r// first we'll increment the\
            \ customer ID and save it\rFile file = new File('/root/lastCust.txt')\r\
            cust = String.format('%07d', file.text.toInteger() + 1)\rPrintWriter writer\
            \ = new PrintWriter(file)\rwriter.print(cust)\rwriter.close()\r\r// second,\
            \ we'll calculate the expiration date\rnow = new Date()\ruse(TimeCategory)\
            \ {\r    expiration = now + 7.days\r}\rexp = new SimpleDateFormat('MM/dd/yyyy').format(expiration)\r\
            \r// third we specify the hard limits on providers and workflows\rprov\
            \ = 100\rwf = 1\r\r// finally, generate the license\rlicense = Vault.encrypt(cust\
            \ + '\\t' + prov + '\\t' + wf + '\\t' + exp)\r\rdetails = [:]\rdetails['customer']\
            \ = cust\rdetails['providers'] = prov\rdetails['workflows'] = wf\rdetails['expiration']\
            \ = exp\rdetails['license'] = license\r\rreturn details"
        - id: 380
          index: 1
          name: "logicOperation"
          displayName: "Operation"
          description: "Type of operation to perform on the incoming values."
          required: true
          visible: true
          editable: true
          dataType: "List"
          value: "Advanced"
        workflowActionName: null
    workflowTransaction: null
    tags:
    - id: 32768
      name: "Integra Cloud"
  uuid: "4bdb7dd4-c829-46a3-98c1-d838d370aa8b"
  pipe: true
  target:
  - 400
- id: 45
  step: 400
  jumpToStep: 0
  failureStep: 0
  timeout: 0
  async: false
  workflowAction:
    id: 97
    name: "Confirmation Email"
    description: ""
    provider:
      id: 9
      name: "Notification"
      description: null
      hostname: "integra-home.cloudapp.net"
      port: 9781
      timeout: 3600000
      username: null
      password: null
      reachable: false
      secured: true
      enabled: null
      providerVersion: null
      tags: []
    providerAction:
      id: 97
      name: "email"
      displayName: "Email"
      description: "Sends an email to the specified parties"
      pipes: []
      transaction: null
      outputs: []
      inputs:
      - id: 124
        index: 0
        name: "Settings"
        displayName: "Settings"
        description: "Mail host settings"
        visible: true
        inputs: []
        inputFields:
        - id: 369
          index: 3
          name: "Password"
          displayName: "Password"
          description: "Password"
          required: true
          visible: true
          editable: true
          dataType: "Password"
          value: "3m1tr0m2014"
        - id: 370
          index: 0
          name: "Host"
          displayName: "SMTP Server"
          description: "SMTP Mail host"
          required: true
          visible: true
          editable: true
          dataType: "String"
          value: "smtp.gmail.com"
        - id: 371
          index: 4
          name: "Enable SSL"
          displayName: "Enable SSL"
          description: "SSL"
          required: false
          visible: true
          editable: true
          dataType: "Boolean"
          value: "true"
        - id: 372
          index: 2
          name: "User"
          displayName: "Username"
          description: "Username"
          required: true
          visible: true
          editable: true
          dataType: "String"
          value: "noreply@emitrom.com"
        - id: 373
          index: 1
          name: "Port"
          displayName: "Port"
          description: "Mail host email port"
          required: false
          visible: true
          editable: true
          dataType: "Integer"
          value: "465"
        workflowActionName: null
      - id: 125
        index: 1
        name: "Message Details"
        displayName: "Message Details"
        description: "Email message details"
        visible: true
        inputs: []
        inputFields:
        - id: 375
          index: 0
          name: "To"
          displayName: "To"
          description: "Comma-separated recipient list"
          required: true
          visible: true
          editable: true
          dataType: "String"
          value: "support@emitrom.com"
        - id: 374
          index: 3
          name: "Message"
          displayName: "Message"
          description: "Message body"
          required: true
          visible: true
          editable: true
          dataType: "TextArea"
          value: "A new Kubernetes pod and service have been created for customer\
            \ ID ${Expression.customer}.\r\rThe Integra license generated expires\
            \ on ${Expression.expiration}.  Please record the following details in\
            \ the Integra tracking database.  \r\rCustomer ID: ${customer}\rProviders:\
            \ ${providers}\rWorkflows: ${workflows}\rExpiration: ${expiration}\rLicense:\
            \ ${license}\r\rYou will need to manually create an endpoint on integra-kube-m1,\
            \ port ${port}\r\rUpon expiration of the trial, the pod and service will\
            \ be automatically deleted.  At that moment you will receive a notification\
            \ email indicating to close the aforementioned endpoint.\r\rThis is an\
            \ automated email coming from an unmonitored email address.  Please do\
            \ not reply.\r\rEmitrom Support\rsupport@emitrom.com"
        - id: 376
          index: 1
          name: "Subject"
          displayName: "Subject"
          description: "Message subject"
          required: true
          visible: true
          editable: true
          dataType: "String"
          value: "New Reactor Provisioned - ${Expression.customer}"
        - id: 377
          index: 2
          name: "AutoPipeAttach"
          displayName: "Attach Pipes"
          description: "Attaches any input piped into this action as a .json attachment"
          required: false
          visible: true
          editable: true
          dataType: "Boolean"
          value: "false"
        workflowActionName: null
    workflowTransaction: null
    tags:
    - id: 32768
      name: "Integra Cloud"
  uuid: "885a0775-88d0-42b1-9216-fafab6ac7890"
  pipe: false
  target: []
- id: 47
  step: 300
  jumpToStep: 0
  failureStep: 0
  timeout: 0
  async: false
  workflowAction:
    id: 99
    name: "Create Service"
    description: ""
    provider:
      id: 8
      name: "Integra Cloud"
      description: ""
      hostname: "integra-kube-m1.cloudapp.net"
      port: 9798
      timeout: 3600000
      username: null
      password: null
      reachable: true
      secured: true
      enabled: null
      providerVersion: "1.1.0"
      tags: []
    providerAction:
      id: 99
      name: "logicAction"
      displayName: "Apply Logic"
      description: "Gives you the ability to insert code dynamically."
      pipes: []
      transaction: null
      outputs: []
      inputs:
      - id: 127
        index: 0
        name: "logicInputs"
        displayName: "Logic"
        description: ""
        visible: true
        inputs: []
        inputFields:
        - id: 381
          index: 0
          name: "logicLanguague"
          displayName: "Language"
          description: "Programming language the expression is written in."
          required: true
          visible: true
          editable: true
          dataType: "List"
          value: "Groovy"
        - id: 382
          index: 2
          name: "logicExpression"
          displayName: "Expression"
          description: "This field holds programmatic expressions that will be evaluated\
            \ at runtime."
          required: true
          visible: true
          editable: true
          dataType: "TextArea"
          value: "import groovy.json.JsonOutput\rimport groovy.json.JsonSlurper\r\r\
            lastId = new File('/root/lastCust.txt').text.trim()\r\rFile service =\
            \ new File('/root/integra-reactor-svc.json')\rJsonSlurper json = new JsonSlurper()\r\
            svc = json.parseText(service.text)\r\rcustomer = 'integra-' + lastId +\
            \ '-svc'\rsvc.id = customer\rsvc.labels.name = customer\rsvc.port = new\
            \ Random().nextInt(65535 - 49152) + 49152\rsvc.selector.name = customer\r\
            \rFile svcSpec =\r    File.createTempFile(customer + '-', '.json', service.getParentFile())\r\
            \rPrintWriter writer = new PrintWriter(svcSpec)\rwriter.print(JsonOutput.prettyPrint(JsonOutput.toJson(svc)))\r\
            writer.close()\r\rproc = 'kubectl create -f ' + svcSpec.getAbsolutePath()\r\
            output = proc.execute().text\rsvcSpec.delete()\r\rresult = [:]\rresult['output']\
            \ = output\rresult['port'] = svc.port\r\rreturn result\r"
        - id: 383
          index: 1
          name: "logicOperation"
          displayName: "Operation"
          description: "Type of operation to perform on the incoming values."
          required: true
          visible: true
          editable: true
          dataType: "List"
          value: "Advanced"
        workflowActionName: null
    workflowTransaction: null
    tags:
    - id: 32768
      name: "Integra Cloud"
  uuid: "f7d41ed8-f0ea-4d05-89d8-d22a41bd1e82"
  pipe: true
  target:
  - 400
- id: 48
  step: 200
  jumpToStep: 0
  failureStep: 0
  timeout: 0
  async: false
  workflowAction:
    id: 100
    name: "Create Pod"
    description: ""
    provider:
      id: 8
      name: "Integra Cloud"
      description: ""
      hostname: "integra-kube-m1.cloudapp.net"
      port: 9798
      timeout: 3600000
      username: null
      password: null
      reachable: true
      secured: true
      enabled: null
      providerVersion: "1.1.0"
      tags: []
    providerAction:
      id: 100
      name: "logicAction"
      displayName: "Apply Logic"
      description: "Gives you the ability to insert code dynamically."
      pipes: []
      transaction: null
      outputs: []
      inputs:
      - id: 128
        index: 0
        name: "logicInputs"
        displayName: "Logic"
        description: ""
        visible: true
        inputs: []
        inputFields:
        - id: 384
          index: 0
          name: "logicLanguague"
          displayName: "Language"
          description: "Programming language the expression is written in."
          required: true
          visible: true
          editable: true
          dataType: "List"
          value: "Groovy"
        - id: 385
          index: 2
          name: "logicExpression"
          displayName: "Expression"
          description: "This field holds programmatic expressions that will be evaluated\
            \ at runtime."
          required: true
          visible: true
          editable: true
          dataType: "TextArea"
          value: "import groovy.json.JsonOutput\rimport groovy.json.JsonSlurper\r\r\
            lastId = new File('/root/lastCust.txt').text.trim()\r\rFile reactor =\
            \ new File('/root/integra-reactor.json')\rJsonSlurper json = new JsonSlurper()\r\
            pod = json.parseText(reactor.text)\r\rcustomer = 'integra-' + lastId\r\
            pod.id = customer\rpod.labels.name = customer\rpod.desiredState.manifest.id\
            \ = customer\r\rFile podSpec = \r    File.createTempFile(customer + '-',\
            \ '.json', reactor.getParentFile())\r\rPrintWriter writer = new PrintWriter(podSpec)\r\
            writer.print(JsonOutput.prettyPrint(JsonOutput.toJson(pod)))\rwriter.close()\r\
            \rdef proc = 'kubectl create -f ' + podSpec.getAbsolutePath()\rresult\
            \ = proc.execute().text\rpodSpec.delete()\r\rreturn result\r"
        - id: 386
          index: 1
          name: "logicOperation"
          displayName: "Operation"
          description: "Type of operation to perform on the incoming values."
          required: true
          visible: true
          editable: true
          dataType: "List"
          value: "Advanced"
        workflowActionName: null
    workflowTransaction: null
    tags:
    - id: 32768
      name: "Integra Cloud"
  uuid: "0171b2e4-bf05-44b0-9bb0-f6ed1f54dfe4"
  pipe: false
  target: []
tags: []
